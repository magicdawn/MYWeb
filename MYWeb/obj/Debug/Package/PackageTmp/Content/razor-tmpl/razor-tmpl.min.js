//------------------------------------
// Created BY Magicdawn
// 2014-5-4 16:21:46
//http://tool.oschina.net/jscompress
//------------------------------------
String.prototype.replaceAll = function (b, a) { return this.replace(new RegExp(b, "g"), a) }; String.prototype.format = function (e, d, c) { var a = this; for (var b in arguments) { a = a.replaceAll("\\{" + b + "\\}", arguments[b].toString()) } return a }; (function (a) { function h(m, l) { if (l) { m = m.replace(/\/\/.*$/gm, "").replace(/\/\*[\s\S]*\*\//g, "") } return m.replace(/@\*[\s\S]*?\*@]/g, "").replace(/\n+/g, "\n").replace(/ +/g, " ").replace(/<!--[\s\S]*?-->/g, "").trim() } function f(m) { var l = m.global ? "g" : ""; l += m.multiline ? "m" : ""; l += m.ignoreCase ? "i" : ""; return new RegExp(m.source, l) } var d = { CodeBlock: 0, Variable: 1, String: 2 }; function c(l, m) { this.Content = l; this.SegmentType = m } function k(l) { this.template = l; this.processedIndex = -1; this.segments = [] } var i = { ForWhile: /^\S(for|while)\s*?\([\s\S]*?\)\s*?\{[\s\S]*?\}/g, IfElse: /^\Sif\([\s\S]*?\)[\s\S]*?(else)?/g, Each: /^\Seach\s*?\([\s\S]+?\)\s*?\{[\s\S]*?\}/g }; var j = { symbol: "@", process: function (m) { var l = new k(h(m)); this.processStringBlock(l); return l.segments }, processStringBlock: function (m) { var o = m.template; for (var l = 0, q = o.length; l < q; l++) { var r = o[l]; if (r == this.symbol) { this.processString(m, l); var n = o[l + 1]; switch (n) { case this.symbol: l = this.processEscapeSymbol(m, l); break; case "{": l = this.processCodeBlock(m, l); break; case "(": l = this.processVariable(m, l); break; case "*": l = this.processComment(m, l); break; default: var s = m.template.substring(l); if (f(i.ForWhile).test(s)) { l = this.processForWhile(m, l) } else { if (f(i.Each).test(s)) { l = this.processEach(m, l) } else { if (f(i.IfElse).test(s)) { l = this.processIfElse(m, l) } } } break } } } var p = m.template.substring(m.processedIndex + 1, m.template.length).trim(); if (p) { m.segments.push(new c(p, d.String)) } }, processString: function (m, l) { var n = m.template.substring(m.processedIndex + 1, l).trim(); if (n) { m.segments.push(new c(n, d.String)) } m.processedIndex = l - 1 }, processEscapeSymbol: function (m, l) { m.segments.push(new c(this.symbol, d.String)); m.processedIndex = l + 1; return m.processedIndex }, processCodeBlock: function (m, l) { var n = this.getSecondIndex(m.template, l + 1); var o = m.template.substring(l + 2, n).trim(); if (o) { o = this.getOriginalFromEscapedCode(o); m.segments.push(new c(o, d.CodeBlock)) } m.processedIndex = n; return m.processedIndex }, processVariable: function (m, l) { var n = this.getSecondIndex(m.template, l + 1); var o = m.template.substring(l + 2, n).trim(); if (o) { o = this.getOriginalFromEscapedCode(o); if (/^- /g.test(o)) { o = o.substring(2); o += ".replace(/&/g,'&amp;')"; o += ".replace(/</g,'&lt;')"; o += ".replace(/>/g,'&gt;')"; o += ".replace(/'/g,'&#39;')"; o += '.replace(/"/g,"&#34;")'; o += ".replace(/\\//g,'&#47;')"; m.segments.push(new c(o, d.Variable)) } else { m.segments.push(new c(o, d.Variable)) } } m.processedIndex = n; return m.processedIndex }, processForWhile: function (q, s) { var r = q.template.substring(s); var m = r.indexOf("{") + s; var l = this.getSecondIndex(q.template, m); var p = q.template.substring(s + 1, m + 1); var o = q.template.substring(m + 1, l); var n = "}"; p = this.getOriginalFromEscapedCode(p); q.segments.push(new c(p, d.CodeBlock)); var t = this.process(o); q.segments = q.segments.concat(t); q.segments.push(new c(n, d.CodeBlock)); q.processedIndex = l; return q.processedIndex }, processEach: function (m, r) { var o = m.template.substring(r); var w = o.indexOf("(") + r; var q = this.getSecondIndex(m.template, w); var v = o.indexOf("{") + r; var u = this.getSecondIndex(m.template, v); var n = m.template.substring(w + 1, q).trim(); var y = n.indexOf("in"); var x = n.substring(0, y).trim(); var s = n.substring(y + 2).trim(); var t = "for(var $index in {1}) { var {0} = {1}[$index];".format(x, s); m.segments.push(new c(t, d.CodeBlock)); var p = m.template.substring(v + 1, u).trim(); var l = this.process(p); m.segments = m.segments.concat(l); m.segments.push(new c("}", d.CodeBlock)); m.processedIndex = u; return u }, processIfElse: function (s, u) { var t = s.template.substring(u); var l = t.indexOf("{") + u; var n = this.getSecondIndex(s.template, l); var r = s.template.substring(u + 1, l + 1); var q = s.template.substring(l + 1, n); var p = "}"; r = this.getOriginalFromEscapedCode(r); s.segments.push(new c(r, d.CodeBlock)); var z = this.process(q); s.segments = s.segments.concat(z); s.segments.push(new c(p, d.CodeBlock)); s.processedIndex = n; t = s.template.substring(n + 1); if (/^\s*else/g.test(t)) { var m = t.indexOf("{") + n + 1; var w = this.getSecondIndex(s.template, m); var y = "else{"; var x = s.template.substring(m + 1, w); var v = "}"; s.segments.push(new c(y, d.CodeBlock)); var o = this.process(x); s.segments = s.segments.concat(o); s.segments.push(new c(v, d.CodeBlock)); s.processedIndex = w } return s.processedIndex }, processComment: function (m, l) { var n = this.getSecondIndex(m.template, l); m.processedIndex = n; return n }, getSecondIndex: function (t, l) { var o = { "{": "}", "(": ")" }; o[this.symbol] = this.symbol; var p = t.substr(l, 1); var n = o[p]; var q = 1; for (var r = l + 1, m = t.length; r < m; r++) { var s = t.substr(r, 1); if (s == n) { q--; if (q == 0) { break } } else { if (s == p) { q++ } } } return r }, getOriginalFromEscapedCode: function (l) { return l.replaceAll("&lt;", "<").replaceAll("&gt;", ">").replaceAll("&amp;", "&") } }; var e = { modelName: "ViewBag", enableEmptyValue: false, escapeInFunction: function (l) { if (!l) { return l } return l.replace(/'/g, "\\'").replace(/"/g, '\\"').replace(/(\r?\n)+/g, "\\n") }, compile: function (m) { var o = []; o.push("var $result='';"); for (var n in m) { var p = m[n].Content; switch (m[n].SegmentType) { case d.CodeBlock: o.push(p); break; case d.Variable: if (!this.enableEmptyValue) { var l = "$result+={0};".format(p); o.push(l) } else { var l = "if(typeof({0}) != 'undefined' && {0}) $result+={0}; else $result+='{0}';".format(p); o.push(l) } break; case d.String: var l = "$result+='{0}';".format(this.escapeInFunction(p)); o.push(l); break; default: break } } o.push("return $result;"); try { return new Function(this.modelName, o.join("")) } catch (q) { console.log("new Function出错,请检查 模板语法 ..."); return new Function("return '';") } } }; var g = { compile: function (m) { var l = j.process(m); var n = e.compile(l); return n }, render: function (m, l) { var n = this.compile(m); return n(l) }, changeSymbol: function (l) { j.symbol = l }, changeModelName: function (l) { e.modelName = l }, enableEmptyValue: function (l) { e.enableEmptyValue = l }, init: function () { this.changeSymbol("@"); this.changeModelName("ViewBag"); this.enableEmptyValue(false) }, version: "0.4.1", updateDate: "2014-5-4" }; if (typeof (module) != "undefined" && module.exports) { module.exports = g } else { a.razor = g } if (typeof ($) != "undefined" && $) { $(function () { $("[razor-template]").hide() }); var b = function (m) { var l = m.attr("razor-for") || m.attr("data-razor-for"); if (l) { return "for({0}){".format(l.trim()) } l = m.attr("razor-if") || m.attr("data-razor-if"); if (l) { return "if({0}){".format(l.trim()) } l = m.attr("razor-while") || m.attr("data-razor-while"); if (l) { return "while({0}){".format(l.trim()) } l = m.attr("razor-each") || m.attr("data-razor-each"); if (l) { return "each({0}){".format(l) } return "" }; $.fn.extend({ compile: function () { var l = ""; if (this[0].tagName === "SCRIPT") { l = this.html() } else { l = this.attr("razor-template") || this.html(); var m = b(this); if (m) { l = j.symbol + m + l + "}" } } return g.compile(l) }, render: function (m) { var n = this.compile(); var l = n(m); if (this[0].tagName != "SCRIPT") { if (!this.attr("razor-template")) { var o = this.html().trim(); this.attr("razor-template", o) } this.html(l); this.show() } return l }, renderToParent: function (m) { var l = g.render(this.html(), m); this.parent().append(l) } }) } })(this);